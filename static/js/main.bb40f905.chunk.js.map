{"version":3,"sources":["components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PersonList/PersonList.tsx","api.ts","pages/PeoplePage/PeoplePage.tsx","pages/HomePage/HomePage.tsx","pages/UnfoundPage/UnfoundPage.tsx","components/PageNavLink/PageNavLink.tsx","components/MainNav/MainNav.tsx","App.tsx","index.tsx"],"names":["Loader","className","PersonLink","person","name","sex","slug","classNames","to","PersonList","persons","useParams","selectedPerson","map","born","died","fatherName","motherName","mother","father","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","getPersonParents","people","personFather","find","parent","personMother","PeoplePage","useState","setPersons","isLoadingList","setIsLoadingList","hasErrorLoading","setHasErrorLoading","getLoadedPersons","loadPersons","parentsPeople","useEffect","length","HomePage","UnfoundPage","PageNavLink","text","isActive","MainNav","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"iSAEaA,EAAS,kBACpB,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,E,gBCOTC,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE1CC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,IACAC,EACEH,EADFG,KAGF,OACE,cAAC,IAAD,CACEL,UAAWM,IAAW,CAAE,kBAA2B,MAARF,IAC3CG,GAAE,aAAQF,GAFZ,SAIGF,GAGN,ECdYK,EAA8B,SAAC,GAErC,IADLC,EACI,EADJA,QAEA,EAAsCC,cAA9BL,KAAMM,OAAd,MAA+B,GAA/B,EAEA,OACE,wBACE,UAAQ,cACRX,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGS,EAAQG,KAAI,SAACV,GACZ,IACEE,EAQEF,EARFE,IACAS,EAOEX,EAPFW,KACAC,EAMEZ,EANFY,KACAC,EAKEb,EALFa,WACAC,EAIEd,EAJFc,WACAX,EAGEH,EAHFG,KACAY,EAEEf,EAFFe,OACAC,EACEhB,EADFgB,OAGF,OACE,qBACE,UAAQ,SACRlB,UAAWM,IAAW,CACpB,yBAA0BK,IAAmBN,IAHjD,UAOE,6BACE,cAAC,EAAD,CAAYH,OAAQA,MAGtB,6BAAKE,IACL,6BAAKS,IACL,6BAAKC,IAEJG,EAEG,6BACE,cAAC,EAAD,CAAYf,OAAQe,MAItB,6BAAKD,GAAc,MAGtBE,EAEG,6BACE,cAAC,EAAD,CAAYhB,OAAQgB,MAItB,6BAAKH,GAAc,QA3BlBV,EA+BV,QAKR,EC7EM,SAASc,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCRD,IAAMQ,EAAmB,SAAC1B,EAAgB2B,GACxC,IAAQd,EAA2Bb,EAA3Ba,WAAYC,EAAed,EAAfc,WAEdc,EAAeD,EAAOE,MAC1B,SAAAC,GAAM,OAAIA,EAAO7B,OAASY,CAApB,IAGFkB,EAAeJ,EAAOE,MAC1B,SAAAC,GAAM,OAAIA,EAAO7B,OAASa,CAApB,IAGR,OAAO,2BACFd,GADL,IAEEgB,OAAQY,EACRb,OAAQgB,GAEX,EAEYC,EAAuB,WAClC,MAA8BC,mBAAmB,IAAjD,mBAAO1B,EAAP,KAAgB2B,EAAhB,KACA,EAA0CD,oBAAS,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAAgB,iDAAG,uGACvBH,GAAiB,GADM,kBAGKnB,IAHL,OAGfuB,EAHe,OAIfC,EAA0BD,EAAY9B,KAC1C,SAAAV,GAAM,OAAI0B,EAAiB1B,EAAQwC,EAA7B,IAGRN,EAAWO,GARU,gDAUrBH,GAAmB,GAVE,yBAYrBF,GAAiB,GAZI,4EAAH,qDAoBtB,OAJAM,qBAAU,WACRH,GACD,GAAE,IAGD,qCACE,oBAAIzC,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACGuC,EAEG,mBAAG,UAAQ,qBAAX,kCAKA,sBAAKvC,UAAU,sBAAf,UACGqC,EAEG,cAAC,EAAD,IAGA,cAAC,EAAD,CAAY5B,QAASA,KAGtB4B,IAAkBE,GAAsC,IAAnB9B,EAAQoC,QAC9C,mBAAG,UAAQ,kBAAX,sDASf,EC9EYC,EAAqB,kBAChC,qBAAK9C,UAAU,YAAf,SACE,oBAAIA,UAAU,QAAd,wBAF8B,ECArB+C,EAAwB,kBACnC,qBAAK/C,UAAU,YAAf,SACE,oBAAIA,UAAU,QAAd,6BAFiC,ECOxBgD,EAA+B,SAAC,GAAD,IAAGzC,EAAH,EAAGA,GAAI0C,EAAP,EAAOA,KAAP,OAC1C,cAAC,IAAD,CACEjD,UAAW,gBAAGkD,EAAH,EAAGA,SAAH,OAAkB5C,IAAW,cACtC,CACE,8BAA+B4C,GAFxB,EAIX3C,GAAIA,EALN,SAOG0C,GARuC,ECP/BE,EAAU,kBACrB,qBACE,UAAQ,MACRnD,UAAU,iCACVoD,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKpD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAaO,GAAG,IAAI0C,KAAK,SAEzB,cAAC,EAAD,CAAa1C,GAAG,UAAU0C,KAAK,iBAXhB,ECUVI,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAMrD,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsD,KAAK,IAAIC,QAAS,cAAC,EAAD,MAEzB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUhD,GAAG,IAAIiD,SAAO,MAEpD,eAAC,IAAD,CAAOF,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,SAG/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,eAMpC,EC3BDG,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.bb40f905.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  return (\n    <Link\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n      to={`../${slug}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  persons: Person[];\n};\n\nexport const PersonList: React.FC<Props> = ({\n  persons,\n}) => {\n  const { slug: selectedPerson = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {persons.map((person) => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n            mother,\n            father,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': selectedPerson === slug,\n              })}\n              key={slug}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              {mother\n                ? (\n                  <td>\n                    <PersonLink person={mother} />\n                  </td>\n                )\n                : (\n                  <td>{motherName || '-'}</td>\n                )}\n\n              {father\n                ? (\n                  <td>\n                    <PersonLink person={father} />\n                  </td>\n                )\n                : (\n                  <td>{fatherName || '-'}</td>\n                )}\n            </tr>\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../../components/Loader';\nimport { PersonList } from '../../components/PersonList';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\n\nconst getPersonParents = (person: Person, people: Person[]): Person => {\n  const { fatherName, motherName } = person;\n\n  const personFather = people.find(\n    parent => parent.name === fatherName,\n  );\n\n  const personMother = people.find(\n    parent => parent.name === motherName,\n  );\n\n  return {\n    ...person,\n    father: personFather,\n    mother: personMother,\n  };\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [persons, setPersons] = useState<Person[]>([]);\n  const [isLoadingList, setIsLoadingList] = useState(false);\n  const [hasErrorLoading, setHasErrorLoading] = useState(false);\n\n  const getLoadedPersons = async () => {\n    setIsLoadingList(true);\n    try {\n      const loadPersons = await getPeople();\n      const parentsPeople: Person[] = loadPersons.map(\n        person => getPersonParents(person, loadPersons),\n      );\n\n      setPersons(parentsPeople);\n    } catch {\n      setHasErrorLoading(true);\n    } finally {\n      setIsLoadingList(false);\n    }\n  };\n\n  useEffect(() => {\n    getLoadedPersons();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        {hasErrorLoading\n          ? (\n            <p data-cy=\"peopleLoadingError\">\n              Something went wrong\n            </p>\n          )\n          : (\n            <div className=\"box table-container\">\n              {isLoadingList\n                ? (\n                  <Loader />\n                )\n                : (\n                  <PersonList persons={persons} />\n                )}\n\n              {(!isLoadingList && !hasErrorLoading && persons.length === 0) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </div>\n);\n","import React from 'react';\n\nexport const UnfoundPage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Page not found</h1>\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    className={({ isActive }) => classNames('navbar-item',\n      {\n        'has-background-grey-lighter': isActive,\n      })}\n    to={to}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const MainNav = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport './App.scss';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { HomePage } from './pages/HomePage';\nimport { UnfoundPage } from './pages/UnfoundPage';\nimport { MainNav } from './components/MainNav';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <MainNav />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"*\" element={<UnfoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}